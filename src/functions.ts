import * as data from "./lib/functions_data";

/**
 * Define a list of applicable Functions for FirebaseFunctions.
 * 
 * FirebaseFunctions用の適用可能なFunctionの一覧を定義します。
 */
export const Functions = {
  /** 
   * Function for sending PUSH notifications.
   * 
   * PUSH通知を送信するためのFunction。
   */
  sendNotification: new data.FunctionsData("send_notification", require("./functions/send_notification")),
  /** 
   * The text is generated using Open AI's GPT.
   * 
   * Open AIのChat GPTを利用して文章を生成します。
   */
  openAIChatGPT: new data.FunctionsData("openai_chat_gpt", require("./functions/openai_chat_gpt")),
  /** 
   * Obtain an Agora.io security token.
   * 
   * Agora.ioのセキュリティトークンを取得します。
   */
  agoraToken: new data.FunctionsData("agora_token", require("./functions/agora_token")),
  /**
   * Convert files generated by Agora.io's cloud recording into an easy-to-handle format from within the app.
   * 
   * It is executed when the file is saved to FirebaseStorage.
   * 
   * Agora.ioのクラウドレコーディングで生成されたファイルをアプリ上から扱いやすい形式に変換します。
   * 
   * FirebaseStorageにファイルが保存されたタイミングで実行されます。
   */
  agoraCloudRecording: new data.FunctionsData("agora_cloud_recording", require("./functions/agora_cloud_recording")),
  /**
   * Performs various Stripe processes.
   * 
   * Firestore integration is a must; please make Firestore available as well.
   *
   * Stripeの各種処理を実行します。
   * 
   * Firestoreとの連携が必須です。Firestoreも利用可能にしてください。
   */
  stripe: new data.FunctionsData("stripe", require("./functions/stripe")),
  /**
   * Receives and processes webhooks from Stripe.
   * 
   * Please register the URL when you deploy this in your Stripe webhook settings.
   * 
   * Firestore integration is a must; please make Firestore available as well.
   *
   * StripeからのWebhookを受け取り処理を行います。
   * 
   * こちらをデプロイした際のURLをStripeのWebhook設定に登録してください。
   * 
   * Firestoreとの連携が必須です。Firestoreも利用可能にしてください。
   */
  stripeWebhook: new data.FunctionsData("stripe_webhook", require("./functions/stripe_webhook")),
  /**
   * Receive and process webhooks for Stripe Connect.
   * 
   * If you do not use Stripe Connect, do not configure it as a Webhook.
   * 
   * Please register the URL when you deploy this in your Stripe webhook settings.
   * 
   * Firestore integration is a must; please make Firestore available as well.
   *
   * Stripe Connect用のWebhookを受信して処理します。
   * 
   * Stripe Connectを利用しない場合はWebhookとして設定しないでください。
   * 
   * こちらをデプロイした際のURLをStripeのWebhook設定に登録してください。
   * 
   * Firestoreとの連携が必須です。Firestoreも利用可能にしてください。
   */
  stripeWebhookConnect: new data.FunctionsData("stripe_webhook_connect", require("./functions/stripe_webhook_connect")),
  /**
   * Webhook for proper redirection when 3D Secure authentication is required.
   * 
   * It is used by accessing the URL directly.
   * 
   * Please set here for [returnUrl].
   *
   * 3Dセキュア認証が必要な場合、適切なリダイレクトを行うためのWebhookです。
   * 
   * 直接URLにアクセスすることで利用します。
   * 
   * [returnUrl]にこちらを設定してください。
   */
  stripeWebhookSecure: new data.FunctionsData("stripe_webhook_secure", require("./functions/stripe_webhook_secure")),
  /**
   * Send email via Gmail.
   *
   * Gmailでメールを送信します。
   */
  gmail: new data.FunctionsData("gmail", require("./functions/gmail")),
  /**
   * Send mail through SendGrid.
   *
   * SendGridでメールを送信します。
   */
  sendGrid: new data.FunctionsData("send_grid", require("./functions/send_grid")),
  /**
   * After being redirected from [android_auth_code], you will get a refresh token to connect to Google's API. Applications Library System Users Volumes bin cores dev etc home opt private sbin tmp usr var Execute [android_auth_code] after registering the required information.
   *
   * [android_auth_code]からリダイレクトされた後、GoogleのAPIに接続するためのリフレッシュトークンを取得します。
   * 必要情報を登録した後[android_auth_code]を実行してください。
   */
  androidAuthCode: new data.FunctionsData("android_auth_code", require("./functions/android_auth_code")),
  /**
   * After being redirected from [android_auth_code], you will get a refresh token to connect to Google's API. Applications Library System Users Volumes bin cores dev etc home opt private sbin tmp usr var Execute [android_auth_code] after registering the required information.
   *
   * [android_auth_code]からリダイレクトされた後、GoogleのAPIに接続するためのリフレッシュトークンを取得します。
   * 必要情報を登録した後[android_auth_code]を実行してください。
   */
  androidToken: new data.FunctionsData("android_token", require("./functions/android_token")),
  /**
   * Performs a consumption-type in-app purchase. The value of the field in the document specified in [path] is added to [value].
   *
   * 消費型のアプリ内課金を行います。[path]に指定したドキュメント内のフィールドの値を[value]に加算します。
   */
  consumableVerifyAndroid: new data.FunctionsData("consumable_verify_android", require("./functions/consumable_verify_android")),
  /**
   * Performs a consumption-type in-app purchase. The value of the field in the document specified in [path] is added to [value].
   *
   * 消費型のアプリ内課金を行います。[path]に指定したドキュメント内のフィールドの値を[value]に加算します。
   */
  consumableVerifyIOS: new data.FunctionsData("consumable_verify_ios", require("./functions/consumable_verify_ios")),
  /**
   * Performs non-consumable in-app purchases. Unlock by setting the value of the field in the document specified in [path] to `true`.
   *
   * 非消費型のアプリ内課金を行います。[path]に指定したドキュメント内のフィールドの値を`true`にすることでアンロックを行います。
   */
  nonconsumableVerifyAndroid: new data.FunctionsData("nonconsumable_verify_android", require("./functions/nonconsumable_verify_android")),
  /**
   * Performs non-consumable in-app purchases. Unlock by setting the value of the field in the document specified in [path] to `true`.
   *
   * 非消費型のアプリ内課金を行います。[path]に指定したドキュメント内のフィールドの値を`true`にすることでアンロックを行います。
   */
  nonconsumableVerifyIOS: new data.FunctionsData("nonconsumable_verify_ios", require("./functions/nonconsumable_verify_ios")),
  /**
   * This is a webhook endpoint for Android. you can create a `purchasing` topic in GCP's pub/sub and set the principal to "google-play-developer-notifications@system.gserviceaccount.com" to receive notifications.
   *
   * Android用のWebhookのエンドポイントです。GCPのpub/subに`purchasing`のトピックを作成しプリンシパルに「google-play-developer-notifications@system.gserviceaccount.com」を設定することで通知を受け取ることができるようになります。
   */
  purchaseWebhookAndroid: new data.FunctionsData("purchase_webhook_android", require("./functions/purchase_webhook_android")),
  /**
   * Webhook endpoint for IOS, which allows you to receive notifications by setting the endpoint in AppStoreConnect's [App]->[App Information]->[App Store Server Notification].
   *
   * IOS用のWebhookのエンドポイントです。AppStoreConnectの[App]->[App情報]->[App Storeサーバ通知]にエンドポイントを設定することで通知を受け取ることができるようになります。
   */
  purchaseWebhookIOS: new data.FunctionsData("purchase_webhook_ios", require("./functions/purchase_webhook_ios")),
  /**
   * Verify subscriptions and add data.
   *
   * サブスクリプションの検証とデータの追加を行います。
   */
  subscriptionVerifyAndroid: new data.FunctionsData("subscription_verify_android", require("./functions/subscription_verify_android")),
  /**
   * Verify subscriptions and add data.
   *
   * サブスクリプションの検証とデータの追加を行います。
   */
  subscriptionVerifyIOS: new data.FunctionsData("subscription_verify_ios", require("./functions/subscription_verify_ios")),
} as const;
