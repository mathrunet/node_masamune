import * as data from "./lib/src/functions_data";

/**
 * Define a list of applicable Functions for FirebaseFunctions.
 * 
 * FirebaseFunctions用の適用可能なFunctionの一覧を定義します。
 */
export const Functions = {
  /**
   * Delete the FirebaseAuthentication user.
   * 
   * FirebaseAuthenticationのユーザーを削除するようにします。
   */
  deleteUser: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "delete_user", func: require("./functions/delete_user"), options: options }),
  /**
   * When a document is deleted, the related collections should be deleted together.
   * 
   * ドキュメントが削除された場合関連するコレクションをまとめて削除するようにします。
   */
  deleteDocuments: (options: data.RelationPathFunctionsOptions = {}) => new data.FunctionsData({ id: "delete_documents", func: require("./functions/delete_documents"), options: options }),
  /** 
   * Synchronize data to Algolia.
   *
   * Algoliaにデータを同期します。
   */
  algolia: (options: data.PathFunctionsOptions = {}) => new data.FunctionsData({ id: "algolia", func: require("./functions/algolia"), options: options }),
  /** 
   * Get latitude and longitude with GeocodingAPI.
   *
   * GeocodingAPIで緯度経度を取得します。
   */
  geocoding: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "geocoding", func: require("./functions/geocoding"), options: options }),
  /** 
   * Function for sending PUSH notifications.
   * 
   * PUSH通知を送信するためのFunction。
   */
  sendNotification: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "send_notification", func: require("./functions/send_notification"), options: options }),
  /** 
   * Function for periodic processing.
   * 
   * 定期的に処理するためのFunction。
   */
  scheduler: (options: data.SchedulerFunctionsOptions = {}) => new data.FunctionsData({ id: "scheduler", func: require("./functions/scheduler"), options: options }),
  /** 
   * The text is generated using Open AI's GPT.
   * 
   * Open AIのChat GPTを利用して文章を生成します。
   */
  openAIChatGPT: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "openai_chat_gpt", func: require("./functions/openai_chat_gpt"), options: options }),
  /** 
   * Obtain an Agora.io security token.
   * 
   * Agora.ioのセキュリティトークンを取得します。
   */
  agoraToken: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "agora_token", func: require("./functions/agora_token"), options: options }),
  /**
   * Convert files generated by Agora.io's cloud recording into an easy-to-handle format from within the app.
   * 
   * It is executed when the file is saved to FirebaseStorage.
   * 
   * Agora.ioのクラウドレコーディングで生成されたファイルをアプリ上から扱いやすい形式に変換します。
   * 
   * FirebaseStorageにファイルが保存されたタイミングで実行されます。
   */
  agoraCloudRecording: (options: data.StorageFunctionsOptions = {}) => new data.FunctionsData({ id: "agora_cloud_recording", func: require("./functions/agora_cloud_recording"), options: options }),
  /**
   * Performs various Stripe processes.
   * 
   * Firestore integration is a must; please make Firestore available as well.
   *
   * Stripeの各種処理を実行します。
   * 
   * Firestoreとの連携が必須です。Firestoreも利用可能にしてください。
   */
  stripe: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "stripe", func: require("./functions/stripe"), options: options }),
  /**
   * Receives and processes webhooks from Stripe.
   * 
   * Please register the URL when you deploy this in your Stripe webhook settings.
   * 
   * Firestore integration is a must; please make Firestore available as well.
   *
   * StripeからのWebhookを受け取り処理を行います。
   * 
   * こちらをデプロイした際のURLをStripeのWebhook設定に登録してください。
   * 
   * Firestoreとの連携が必須です。Firestoreも利用可能にしてください。
   */
  stripeWebhook: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "stripe_webhook", func: require("./functions/stripe_webhook"), options: options }),
  /**
   * Receive and process webhooks for Stripe Connect.
   * 
   * If you do not use Stripe Connect, do not configure it as a Webhook.
   * 
   * Please register the URL when you deploy this in your Stripe webhook settings.
   * 
   * Firestore integration is a must; please make Firestore available as well.
   *
   * Stripe Connect用のWebhookを受信して処理します。
   * 
   * Stripe Connectを利用しない場合はWebhookとして設定しないでください。
   * 
   * こちらをデプロイした際のURLをStripeのWebhook設定に登録してください。
   * 
   * Firestoreとの連携が必須です。Firestoreも利用可能にしてください。
   */
  stripeWebhookConnect: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "stripe_webhook_connect", func: require("./functions/stripe_webhook_connect"), options: options }),
  /**
   * Webhook for proper redirection when 3D Secure authentication is required.
   * 
   * It is used by accessing the URL directly.
   * 
   * Please set here for [returnUrl].
   *
   * 3Dセキュア認証が必要な場合、適切なリダイレクトを行うためのWebhookです。
   * 
   * 直接URLにアクセスすることで利用します。
   * 
   * [returnUrl]にこちらを設定してください。
   */
  stripeWebhookSecure: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "stripe_webhook_secure", func: require("./functions/stripe_webhook_secure"), options: options }),
  /**
   * Send email via Gmail.
   *
   * Gmailでメールを送信します。
   */
  gmail: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "gmail", func: require("./functions/gmail"), options: options }),
  /**
   * Send mail through SendGrid.
   *
   * SendGridでメールを送信します。
   */
  sendGrid: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "send_grid", func: require("./functions/send_grid"), options: options }),
  /**
   * After being redirected from [android_auth_code], you will get a refresh token to connect to Google's API. Applications Library System Users Volumes bin cores dev etc home opt private sbin tmp usr var Execute [android_auth_code] after registering the required information.
   *
   * [android_auth_code]からリダイレクトされた後、GoogleのAPIに接続するためのリフレッシュトークンを取得します。
   * 必要情報を登録した後[android_auth_code]を実行してください。
   */
  androidAuthCode: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "android_auth_code", func: require("./functions/android_auth_code"), options: options }),
  /**
   * After being redirected from [android_auth_code], you will get a refresh token to connect to Google's API. Applications Library System Users Volumes bin cores dev etc home opt private sbin tmp usr var Execute [android_auth_code] after registering the required information.
   *
   * [android_auth_code]からリダイレクトされた後、GoogleのAPIに接続するためのリフレッシュトークンを取得します。
   * 必要情報を登録した後[android_auth_code]を実行してください。
   */
  androidToken: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "android_token", func: require("./functions/android_token"), options: options }),
  /**
   * Performs a consumption-type in-app purchase. The value of the field in the document specified in [path] is added to [value].
   *
   * 消費型のアプリ内課金を行います。[path]に指定したドキュメント内のフィールドの値を[value]に加算します。
   */
  consumableVerifyAndroid: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "consumable_verify_android", func: require("./functions/consumable_verify_android"), options: options }),
  /**
   * Performs a consumption-type in-app purchase. The value of the field in the document specified in [path] is added to [value].
   *
   * 消費型のアプリ内課金を行います。[path]に指定したドキュメント内のフィールドの値を[value]に加算します。
   */
  consumableVerifyIOS: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "consumable_verify_ios", func: require("./functions/consumable_verify_ios"), options: options }),
  /**
   * Performs non-consumable in-app purchases. Unlock by setting the value of the field in the document specified in [path] to `true`.
   *
   * 非消費型のアプリ内課金を行います。[path]に指定したドキュメント内のフィールドの値を`true`にすることでアンロックを行います。
   */
  nonconsumableVerifyAndroid: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "nonconsumable_verify_android", func: require("./functions/nonconsumable_verify_android"), options: options }),
  /**
   * Performs non-consumable in-app purchases. Unlock by setting the value of the field in the document specified in [path] to `true`.
   *
   * 非消費型のアプリ内課金を行います。[path]に指定したドキュメント内のフィールドの値を`true`にすることでアンロックを行います。
   */
  nonconsumableVerifyIOS: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "nonconsumable_verify_ios", func: require("./functions/nonconsumable_verify_ios"), options: options }),
  /**
   * This is a webhook endpoint for Android. you can create a `purchasing` topic in GCP's pub/sub and set the principal to "google-play-developer-notifications@system.gserviceaccount.com" to receive notifications.
   *
   * Android用のWebhookのエンドポイントです。GCPのpub/subに`purchasing`のトピックを作成しプリンシパルに「google-play-developer-notifications@system.gserviceaccount.com」を設定することで通知を受け取ることができるようになります。
   */
  purchaseWebhookAndroid: (options: data.PubsubFunctionsOptions = {}) => new data.FunctionsData({ id: "purchase_webhook_android", func: require("./functions/purchase_webhook_android"), options: options }),
  /**
   * Webhook endpoint for IOS, which allows you to receive notifications by setting the endpoint in AppStoreConnect's [App]->[App Information]->[App Store Server Notification].
   *
   * IOS用のWebhookのエンドポイントです。AppStoreConnectの[App]->[App情報]->[App Storeサーバ通知]にエンドポイントを設定することで通知を受け取ることができるようになります。
   */
  purchaseWebhookIOS: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "purchase_webhook_ios", func: require("./functions/purchase_webhook_ios"), options: options }),
  /**
   * Verify subscriptions and add data.
   *
   * サブスクリプションの検証とデータの追加を行います。
   */
  subscriptionVerifyAndroid: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "subscription_verify_android", func: require("./functions/subscription_verify_android"), options: options }),
  /**
   * Verify subscriptions and add data.
   *
   * サブスクリプションの検証とデータの追加を行います。
   */
  subscriptionVerifyIOS: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "subscription_verify_ios", func: require("./functions/subscription_verify_ios"), options: options }),
  /**
   * Convert videos uploaded to storage to HLS format.
   * 
   * ストレージにアップロードされた動画をHLS形式に変換します。
   */
  hls: (options: data.StorageFunctionsOptions = {}) => new data.FunctionsData({ id: "hls", func: require("./functions/hls"), options: options }),

  /**
   * A function to enable the use of external Firestore Collection Models.
   * 
   * 外部のFirestoreのCollectionModelを利用できるようにするためのFunction。
   */
  collectionModelFirestore: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "collection_model_firestore", func: require("./functions/collection_model_firestore"), options: options }),
  /**
   * A function to enable the use of external Firestore Document Models.
   * 
   * 外部のFirestoreのDocumentModelを利用できるようにするためのFunction。
   */
  documentModelFirestore: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "document_model_firestore", func: require("./functions/document_model_firestore"), options: options }),
  /**
   * Functions for enabling external Firestore Aggregate methods.
   * 
   * 外部のFirestoreのAggregateメソッドを利用できるようにするFunctions。
   */
  aggregationModelFirestore: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "aggregation_model_firestore", func: require("./functions/aggregation_model_firestore"), options: options }),
  /**
   * A function to enable the use of external Firebase Storage.
   * 
   * 外部のFirebase Storageを利用できるようにするためのFunction。
   */
  storageFirebase: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "storage_firebase", func: require("./functions/storage_firebase"), options: options }),
  /**
   * Endpoints for testing.
   * 
   * テストを行うためのエンドポイントです。
   */
  test: (options: data.HttpFunctionsOptions = {}) => new data.FunctionsData({ id: "test", func: require("./functions/test"), options: options }),
} as const;
