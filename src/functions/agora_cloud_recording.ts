import * as functions from "firebase-functions/v2";
import * as admin from "firebase-admin";
import { StorageFunctionsOptions } from "../lib/src/functions_base";

/**
 * Convert files generated by Agora.io's cloud recording into an easy-to-handle format from within the app.
 * 
 * It is executed when the file is saved to FirebaseStorage.
 * 
 * Agora.ioのクラウドレコーディングで生成されたファイルをアプリ上から扱いやすい形式に変換します。
 * 
 * FirebaseStorageにファイルが保存されたタイミングで実行されます。
 */
module.exports = (
    regions: string[],
    options: StorageFunctionsOptions,
    data: { [key: string]: any }
) => functions.storage.onObjectFinalized(
    {
        region: options.region ?? regions[0],
        timeoutSeconds: options.timeoutSeconds,
        memory: options.memory,
        minInstances: options.minInstances,
        concurrency: options.concurrency,
        maxInstances: options.maxInstances,
    },
    async (object) => {
        try {
            const source = object.data.name;
            if (!source) {
                return;
            }
            const bucket = admin.storage().bucket(object.bucket);
            const targetScreenShot = source.toString().match(/([a-z0-9A-Z]+)_([a-z0-9A-Z]+)__uid_s_([0-9]+)__uid_e_video_([0-9]+).jp(e)?g/);
            if (targetScreenShot) {
                const target = targetScreenShot[2] + ".jpg";
                if (target == source.toString()) {
                    console.log("Jpeg file is not replaced.");
                    return;
                }
                await bucket.file(source).copy(
                    target,
                    {
                        contentType: "image/jpeg",
                    }
                );
                await bucket.file(source).delete();
                await bucket.file(target).makePublic();
            } else {
                const targetM3U8 = source.toString().match(/([a-z0-9A-Z]+)_([a-z0-9A-Z]+).m3u8/);
                if (targetM3U8) {
                    const target = targetM3U8[2] + ".m3u8";
                    if (target == source.toString()) {
                        console.log("M3U8 file is not replaced.");
                        return;
                    }
                    await bucket.file(source).copy(
                        target,
                        {
                            cacheControl: "no-cache",
                            contentType: "application/x-mpegURL",
                        }
                    );
                    await bucket.file(source).delete();
                    await bucket.file(target).makePublic();
                } else {
                    const targetTS = source.toString().match(/([a-z0-9A-Z]+)_([a-z0-9A-Z]+)_([a-z0-9A-Z]+).ts/);
                    if (targetTS) {
                        const target = targetTS[0];
                        if (target == source.toString()) {
                            console.log("Ts file is not replaced.");
                            return;
                        }
                        console.log("Ts file is replaced.");
                        await bucket.file(source).copy(
                            target,
                            {
                                contentType: "video/MP2T",
                            }
                        );
                        await bucket.file(source).delete();
                        await bucket.file(target).makePublic();
                    }
                }
            }
        } catch (err) {
            console.error(err);
            throw err;
        }
    }
);
